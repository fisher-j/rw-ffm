[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RW-FFM Fuel Analysis",
    "section": "",
    "text": "Preface\nI am going to analyze fuels in 3d for my master’s thesis.\n3d fuel models support the use of 3d, atmospheric-coupled, physics-based fire models. My research focuses on managed redwood forests which, in general have not burned in hundreds of years, but under indigenous management, they burned on average about every 15 years. Fire exclusion, and several cycles of resulting from Euro-american colonization has ostensibly resulted in novel fuel conditions for these systems. Process based models, which can extend to novel conditions could be important to realistically predicing potential fire behavior and building trust surrounding fires re-introduction into these coastal forests. It is assumed that this is a desireable and potentially necesary outcome.\nHerein are the steps I took to model fuels in 3d using data collected from the Jackson Demonstration State Forest in conjunction with the Redwood Fire and Fuels Mitigation thinning experiment, using mostly traditional, field-based fuel sampling techniques."
  },
  {
    "objectID": "data_description.html#datasheets",
    "href": "data_description.html#datasheets",
    "title": "1  Data description",
    "section": "1.1 datasheets",
    "text": "1.1 datasheets\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\ndatasheetid\nPK Unique ID for each physical datasheet\n\n\nfilename\nFilename of the scanned pdf for this datasheet\n\n\nmodtime\nThe last modification time of the file, provided by the os\n\n\nstatus\nOne of ‘started’, ‘incomplete’, or ‘incomplete’, indicating the data entry status. Fuel datasheets that do not have fuel bed depth are marked as incomplete."
  },
  {
    "objectID": "data_description.html#plots",
    "href": "data_description.html#plots",
    "title": "1  Data description",
    "section": "1.2 plots",
    "text": "1.2 plots\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\nplotid\nPK Unique ID for each physical plot\n\n\nsite\nSite name, one of: ‘dun’, ‘fair’, ‘camp8’, ‘bob’, ‘crib’, ‘hare’\n\n\ntreatment\nOne of ‘np’ (no prep), ‘m’ (masticate), or ‘ls’ (lop and scatter)\n\n\nburn\nOne of ‘b’ (burn), or (no burn), indicating if the treatment will be burned or not\n\n\nplotnum\nInteger identying the plot number within the treatment. Potential plot locations (arranged systematically) were numbered sequentially, rowwise from upper left to lower right\n\n\ncoord_x\nEast-west coordinate of plot center, currently unused\n\n\ncoord_y\nNorth-south coordinate of plot center, currently unused\n\n\nnotes\nGenearl notes for plot"
  },
  {
    "objectID": "data_description.html#stages",
    "href": "data_description.html#stages",
    "title": "1  Data description",
    "section": "1.3 stages",
    "text": "1.3 stages\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\nstageid\nPK Integer indicating experiment stage, stage 1 being pre-treatment.\n\n\nstage\nText name of stage, currently unused."
  },
  {
    "objectID": "data_description.html#collections",
    "href": "data_description.html#collections",
    "title": "1  Data description",
    "section": "1.4 collections",
    "text": "1.4 collections\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\ncollectid\nPK Identifies a collection, which is data collected for one datasheettype, at one plot, during one stage.\n\n\nplotid\nFK Refers to plots.plotid.\n\n\nstageid\nFK Refers to stages.stageid.\n\n\ndatasheettype\nData was collected on three different datasheets, broadly representing different fuels strata. One of ‘trees’, ‘regen’, or ‘fuels’."
  },
  {
    "objectID": "data_description.html#collectdatasheets",
    "href": "data_description.html#collectdatasheets",
    "title": "1  Data description",
    "section": "1.5 collectdatasheets",
    "text": "1.5 collectdatasheets\n\n\n\nfield\ndescription\n\n\n\n\ncollectid\nPK FK Refers to collections.collectid.\n\n\ncollectid\nPK FK Referes to datasheets.datasheetid."
  },
  {
    "objectID": "data_description.html#collectdates",
    "href": "data_description.html#collectdates",
    "title": "1  Data description",
    "section": "1.6 collectdates",
    "text": "1.6 collectdates\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\ncollectid\nFK Refers to collections.collectid.\n\n\ndate\nA date associated with a collection. There can be multiple dates for a collection."
  },
  {
    "objectID": "data_description.html#collectcrew",
    "href": "data_description.html#collectcrew",
    "title": "1  Data description",
    "section": "1.7 collectcrew",
    "text": "1.7 collectcrew\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\ncollectid\nFK Refers to collections.collectid.\n\n\ntransectid\nFor fuels transect data, this field allows crew members to be identified on a transect basis. Null for other datasheet type\n\n\nrole\nCurretnly only used to identify the crew member responsible for estimating fine woody debris (fwd) or vegetation (veg).\n\n\nmember\nFirst and last initials of a crew member."
  },
  {
    "objectID": "data_description.html#reftrees",
    "href": "data_description.html#reftrees",
    "title": "1  Data description",
    "section": "1.8 reftrees",
    "text": "1.8 reftrees\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\ncollectid\nFK Refers to collections.collectid.\n\n\ntreeid\nFK refers to trees.treeid.\n\n\ndistance\nDistance in meters from plot center to pith of reference tree.\n\n\nazimuth\nAzimuth in degrees from reference tree center to plot center."
  },
  {
    "objectID": "data_description.html#regenmetadata",
    "href": "data_description.html#regenmetadata",
    "title": "1  Data description",
    "section": "1.9 regenmetadata",
    "text": "1.9 regenmetadata\n\n\n\nfield\ndescription\n\n\n\n\ncollectid\nPK Refers to collections.collectid.\n\n\nseedlingradius\nRadius of seedling plot in meters.\n\n\nsaplingradius\nRadius of sapling plot in meters.\n\n\nnotes\nPermanent notes regarding the regen plot."
  },
  {
    "objectID": "data_description.html#treemetadata",
    "href": "data_description.html#treemetadata",
    "title": "1  Data description",
    "section": "1.10 treemetadata",
    "text": "1.10 treemetadata\n\n\n\nfield\ndescription\n\n\n\n\ncollectid\nPK Refers to collections.collectid.\n\n\nnotes\nPermanent notes regarding the trees plot."
  },
  {
    "objectID": "data_description.html#trees",
    "href": "data_description.html#trees",
    "title": "1  Data description",
    "section": "1.11 trees",
    "text": "1.11 trees\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\ntreeobsid\nPK Uniquely identifies the observation of a tree. This allows a tree to be observed multiple times (for different stages). Trees were measured on a 11.28 meter radius plot.\n\n\ncollectid\nFK Refers to collections.collectid.\n\n\ntreeid\nTag number of physical tree tag. These are unique across the experiment.\n\n\nspp\nTree species as a two-letter identifier, to=tanoak, df=Douglas-fir, rw=redwood, gc=golden chinquapin, gf=grand fir, md=madrone, cb=California bay, cn=California nutmeg, sx=Salix spp., hm=western hemlock, cp=unknown, ra=red alder, wm=wax myrtle, bp=bishop pine.\n\n\ndbh\nDiameter at breash height in cm.\n\n\nht\nTotal height of tree. Heights were recorded intermittently in the begining, then not at all later on. The decision was made to use heights predicted from local allometric equations.\n\n\ncbh\nCrown base heigth in meters. This is the vertical distance from the level of the base of the tree, to the continuous live crown. Single, lone, or outlier branches were skipped. No limit was placeds on the number of sides that branches must be comming out of.\n\n\ncr\nCrown ratio, not used.\n\n\nclumpid\nInteger identifying trees that were determined to belong to the same clump. For redwoods, this meant that stems were within about a meter of eachother and assumed to share a root system. It did not include all trees forming a fairy ring. For tanoak, trees were visibly connected above the soil level.\n\n\nnotes\nTree observation notes."
  },
  {
    "objectID": "data_description.html#treedefect",
    "href": "data_description.html#treedefect",
    "title": "1  Data description",
    "section": "1.12 treedefect",
    "text": "1.12 treedefect\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\ntreeobsid\nFK refers to trees.treeobsid\n\n\nlocation\nOne of: ‘top’, ‘mid’, or ‘bot’, indicating the upper, middle, or lower third of the tree as the location of the damage.\n\n\ndefecttyp\nDescription of deffect, the most commom was ‘operational’ meaning damage resuling from skidding or felling operations. Lean (and lean angle) was recorded in notes.\n\n\nregencounts,collectid,“FK refers to collections.collectid."
  },
  {
    "objectID": "data_description.html#regencounts",
    "href": "data_description.html#regencounts",
    "title": "1  Data description",
    "section": "1.13 regencounts",
    "text": "1.13 regencounts\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\nspp\nSpecies, refer to trees.spp.\n\n\nsizeclass\n1-cm size classes (exept for the two smallest, which were 2.5 cm classes) for saplings less than 10 cm. &lt;BH, (less than breast height) identifies seedlings.\n\n\ncount\nNumber of saplings per spp., size-class."
  },
  {
    "objectID": "data_description.html#regenheights",
    "href": "data_description.html#regenheights",
    "title": "1  Data description",
    "section": "1.14 regenheights",
    "text": "1.14 regenheights\n\n\n\nfield\ndescription\n\n\n\n\ncollectid\nFK Refers to collections.collectid.\n\n\nspp\nSpecies.\n\n\nsizeclass\nSapling size-class.\n\n\ncbh\nCrown base height.\n\n\nht\nTotal height."
  },
  {
    "objectID": "data_description.html#clumpsaplings",
    "href": "data_description.html#clumpsaplings",
    "title": "1  Data description",
    "section": "1.15 clumpsaplings",
    "text": "1.15 clumpsaplings\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\ncollectid\nFK Refers to collections.collectid.\n\n\nclumpid\nFK Refers to trees.clumpid.\n\n\nsapdbh\n1-cm diameter class of an individual sampling in a clump with a tree. These are basically basal sprouts."
  },
  {
    "objectID": "data_description.html#fuelmetadata",
    "href": "data_description.html#fuelmetadata",
    "title": "1  Data description",
    "section": "1.16 fuelmetadata",
    "text": "1.16 fuelmetadata\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\ncollectid\nPK Refers to collections.collectid.\n\n\nonehrlen\nSpecifies transect length for one-hour fuels in meters.\n\n\ntenhrlen\nSpecifies transect length for ten-hour fuels in meters.\n\n\nhundhrlen\nSpecifies transect length for hundred-hour fuels in meters.\n\n\nthoushrlen\nSpecifies transect length for thousand-hour fuels in meters.\n\n\nnotes\nPermanent notes regarding the fuels plot."
  },
  {
    "objectID": "data_description.html#transects",
    "href": "data_description.html#transects",
    "title": "1  Data description",
    "section": "1.17 transects",
    "text": "1.17 transects\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\ntransectid\nPK Unique identifier for observations of transects. Should have been called ‘transectobsid’. There is currently not another identifier for transects as permanent entities. Subsequent measurements will be linked based on their plotid and azimuth.\n\n\ncollectid\nFK Refers to collections.collectid.\n\n\ntransectnum\nTransects within plots were given a number 1-3.\n\n\nazimuth\nAzimuth of transect from plot center, usually one of 0, 120, or 240, unless and obstacle required moving the transect. Then it was moved the shortest distance to avoid the obstacle (usually a large stump).\n\n\nslope\nTotal slope, in percent from begining to end of transect.\n\n\nnotes\nTransect observation notes."
  },
  {
    "objectID": "data_description.html#fwd",
    "href": "data_description.html#fwd",
    "title": "1  Data description",
    "section": "1.18 fwd",
    "text": "1.18 fwd\n\n\n\nfield\ndescription\n\n\n\n\ntransectid\nFK Refers to transects.transectid.\n\n\nonehr\nCount of one-hr fuels. &lt; 0.635 cm.\n\n\ntenhr\nCount of ten-hr fuels, 0.635 - &lt;2.54 cm.\n\n\nhundhr\nCount of hundred-hr fuels, 2.54 - &lt;7.62 cm."
  },
  {
    "objectID": "data_description.html#station",
    "href": "data_description.html#station",
    "title": "1  Data description",
    "section": "1.19 station",
    "text": "1.19 station\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\ntransectid\nFK Refers to transects.transectid.\n\n\nmetermark\nMeters from plot center along the transect where the measurement was taken.\n\n\ndepth\nCombined depth of duff and litter. This was measured to the top of the litter layer and may include 1-hour fuels.\n\n\npctlitter\nPercent of duff and litter depth that is composed of litter. Litter was judged by having a lighter color, and particles that had not yet begun to break down, for instance, redwood sprays with leaves still attached.\n\n\nfbd\nFuel bed depth was measured as an ocular estimate of the average combined depth of fine and coarse woody fuels in a 1 m radius circle, centered at the metermark. This excluded duff.\n\n\nlivewoody\nPercent cover of live woody material within a 1-meter radius sampling cylinder, 2-meters tall. Alternatively, Percent of ground that would be completely covered if all woody vegetation within the sampling cylinder were pushed to the ground.\n\n\ndeadwoody\nSame as for live woody, but for dead material attached to live plants.\n\n\nwoodyheight\nAverage maximum height of live or dead woody vegetation within the sampling cylinder. If a sheet were draped over the woody vegetation only, the average height of the sheet.\n\n\nliveherb\nPercent cover of live herbaceous vegetation, as for livewoody.\n\n\ndeadherb\nPercent cover of dead herbaceous vegetation, as livewoody.\n\n\nherbheight\nAverage maximum height in meters, as for woodyheight."
  },
  {
    "objectID": "data_description.html#cwd",
    "href": "data_description.html#cwd",
    "title": "1  Data description",
    "section": "1.20 cwd",
    "text": "1.20 cwd\n\n\n\n\n\n\n\nfield\ndescription\n\n\n\n\ntransectid\nFK Refers to transects.transectid.\n\n\ndiameter\nDiameter in cm of dead downed wood &gt; 7.62cm at the location where the transect intersects with the particles pith. Only pieces whose pith intersects with the vertical sampling plane are counted.\n\n\ndecayclass\nDecay class 1-5, 1=Fine branches still present, 2=Some branches and bark missing, 3=most branches and much bark missing potentially minor decay, 4=Significant decay, 5=Almost completely rotten."
  },
  {
    "objectID": "ground/ground.html",
    "href": "ground/ground.html",
    "title": "From the ground up",
    "section": "",
    "text": "In odrder to model aerial and surface fuels in 3d, we need to place them on appropriate topography. Topography will affect fire behavior as well as tree placement using the tree placement algorithm, as it affects the spatial locations of crowns and thus their overlap.\nTopographical variables such as slope, aspect, slope position, and land surface curvature may be important for predicting the spatial distribution of fuel loads.\nI will assess topography of our plots/sites visually to determine the best approach for simulating topography for fire simulations and calculate the above mentioned variables for each plot. Transect slope was measured in the field, but I can double check these values using the dem."
  },
  {
    "objectID": "ground/named_and_numbered.html",
    "href": "ground/named_and_numbered.html",
    "title": "Import and wrangle 2d",
    "section": "",
    "text": "First I need to import and wrangle spatial and tabular data. Here I’m going to focus on the 2d, vector data.\n\n\nCode\nlibrary(sf)\nlibrary(DBI)\nlibrary(RSQLite)\nlibrary(tibble)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(tmap)\n\n# Load data\nlayers &lt;- \"../data/gis/vector.gpkg\"\nblocks &lt;- st_read(layers, \"Blocks\", as_tibble = TRUE, quiet = TRUE)\nblocks_buffer  &lt;- st_buffer(blocks, 30)\nplot_centers &lt;- st_read(layers, \"Plot_Centers\", as_tibble = TRUE, quiet = TRUE)\n\n# what is the current plot order\npts &lt;- plot_centers |&gt;\n  group_by(THP, Replicate) |&gt;\n  mutate(plotnum = row_number()) |&gt;\n  select(plotnum, THP, Replicate) |&gt;\n  ungroup()\n\ntm_shape(blocks) +\n  tm_borders() +\n  tm_facets(by = c(\"THP_Name\", \"BlockName\")) +\n  tm_shape(pts) +\n  tm_text(size = 1.6, \"plotnum\") +\n  tm_facets(by = c(\"THP\", \"Replicate\"))\n\n\n\n\n\nCode\n# We numbered plots from the top-left to bottom-right, I'll need an algorithm\n# for determing which row a point is on (they don't all have the same\n# y-coorinate)\n\n# I assumed that rows had a similar y coordiante and tried different binning\n# methods until the bins captured the rows correctly\n\nxy &lt;- st_coordinates(plot_centers)\npts &lt;- plot_centers |&gt;\n  bind_cols(xy) |&gt;\n  group_by(THP, Replicate) |&gt;\n  mutate(plotnum = row_number(), .after = \"Replicate\") |&gt;\n  mutate(row = cut_width(Y, 43, center = median(Y), labels = FALSE)) |&gt;\n  arrange(desc(row), plotnum, .by_group = TRUE) |&gt;\n  mutate(plotnum = row_number()) |&gt;\n  select(-c(X, Y, row)) |&gt;\n  ungroup()\n\ntm_shape(blocks) +\n  tm_borders() +\n  tm_facets(by = c(\"THP_Name\", \"BlockName\")) +\n  tm_shape(pts) +\n  tm_text(size = 1.6, \"plotnum\") +\n  tm_facets(by = c(\"THP\", \"Replicate\"))\n\n\n\n\n\nCode\nplot_centers &lt;- pts\n\n# We didn't collect data from all plots. Lets look at entered data and see\n# which plots were used\ncon &lt;- dbConnect(RSQLite::SQLite(), \"../data/rw.db\")\nplots_data &lt;- dbGetQuery(con, \"SELECT * FROM plots\") |&gt; as_tibble()\nplots_data\n\n\n# A tibble: 184 × 8\n   plotid site  treatment burn  plotnum coord_x coord_y notes\n    &lt;int&gt; &lt;chr&gt; &lt;chr&gt;     &lt;chr&gt;   &lt;int&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;\n 1      1 bob   ls        b          12      NA      NA &lt;NA&gt; \n 2      2 bob   ls        b           3      NA      NA &lt;NA&gt; \n 3      3 bob   ls        b           5      NA      NA &lt;NA&gt; \n 4      4 bob   ls        b           6      NA      NA &lt;NA&gt; \n 5      5 bob   ls        b           9      NA      NA &lt;NA&gt; \n 6      6 bob   ls        nb          1      NA      NA &lt;NA&gt; \n 7      7 bob   ls        nb         12      NA      NA &lt;NA&gt; \n 8      8 bob   ls        nb          3      NA      NA &lt;NA&gt; \n 9      9 bob   ls        nb          6      NA      NA &lt;NA&gt; \n10     10 bob   ls        nb          9      NA      NA &lt;NA&gt; \n# ℹ 174 more rows\n\n\nCode\n# ensure spatial data columns match tabular data\nmake_names_consistent &lt;- function(df, thp_var, replicate_var, ...) {\n  df |&gt;\n    mutate(\n      site = case_when(\n        str_detect({{ thp_var }}, \"Fairbanks\") ~ \"fair\",\n        str_detect({{ thp_var }}, \"Top of\") ~ \"hare\",\n        str_detect({{ thp_var }}, \"Camp 8\") ~ \"camp8\",\n        str_detect({{ thp_var }}, \"Bob\") ~ \"bob\",\n        str_detect({{ thp_var }}, \"Dunlap\") ~ \"dun\",\n        str_detect({{ thp_var }}, \"Cribwall\") ~ \"crib\",\n        TRUE ~ NA_character_\n      ),\n      treatment = str_extract(tolower({{ replicate_var }}), \"ls|m|np\"),\n      burn = str_extract(tolower({{ replicate_var }}), \"b|nb\"),\n      ...\n    ) |&gt;\n    rename(thp = {{ thp_var }}, replicate = {{ replicate_var}})\n}\n\n# The treatment blocks (and blocks buffer) should also use this naming\n# convention\nblocks &lt;- make_names_consistent(\n  blocks,\n  THP_Name,\n  BlockName,\n  .after = \"BlockName\"\n)\nblocks_buffer &lt;- make_names_consistent(\n  blocks_buffer,\n  THP_Name,\n  BlockName,\n  .after = \"BlockName\"\n)\nplot_centers &lt;- make_names_consistent(\n  plot_centers,\n  THP,\n  Replicate,\n  .after = \"plotnum\"\n)\n\n\n# spatial data should include plotids from tabular data\nplot_centers &lt;- left_join(\n  plot_centers,\n  select(plots_data, any_of(c(names(plot_centers), \"plotid\")))\n) |&gt;\n  relocate(plotid)\n\n# Now I could insert the plot center coordiates into the tabular data but I\n# think that for now, it is fine to have tabular and spatial data stored\n# separately, they can easily be combined when loaded.\n\n# data_to_insert &lt;- select(plot_centers, X, Y, plotid) |&gt;\n#   st_drop_geometry() |&gt;\n#   tidyr::drop_na() |&gt;\n#   as.list() |&gt;\n#   unname()\n#\n# dbExecute(\n#   con,\n#   \"UPDATE plots SET coord_x = ?, coord_y = ? WHERE plotid = ?\",\n#   params = data_to_insert\n# )\n\n# our plots were 11.28 meters in diameter\nplot_discs &lt;- st_buffer(plot_centers, 11.28)\n\ntmap_mode(\"view\")\nmap_kinds &lt;- c(\"Esri.WorldTopoMap\", \"Esri.WorldImagery\")\ntmap_options(basemaps = map_kinds)\ntm_shape(blocks) +\n  tm_borders(col = \"red\", lwd = 1.4) +\n  tm_shape(plot_discs) +\n  tm_borders(col = \"red\", lwd = 1.4) +\n  tm_text(col = \"red\", size = 1.6, \"plotnum\")\n\n\n\n\n\n\nCode\n# # as a last step, I'll write the plot number data back to a new database. \n# # This is commented out so it doesn't get written each time it's run\nnamed_numbered &lt;- \"../data/gis/named_numbered.gpkg\"\n\nst_write(\n  st_transform(plot_centers, st_crs(26910)),\n  named_numbered,\n  \"plot_centers\",\n  append = FALSE\n)\n\n\nDeleting layer `plot_centers' using driver `GPKG'\nWriting layer `plot_centers' to data source \n  `../data/gis/named_numbered.gpkg' using driver `GPKG'\nWriting 445 features with 8 fields and geometry type Point.\n\n\nCode\nst_write(\n  st_transform(blocks, st_crs(26910)),\n  named_numbered,\n  \"blocks\",\n  append = FALSE\n)\n\n\nDeleting layer `blocks' using driver `GPKG'\nWriting layer `blocks' to data source \n  `../data/gis/named_numbered.gpkg' using driver `GPKG'\nWriting 36 features with 6 fields and geometry type Multi Polygon.\n\n\nCode\nst_write(\n  st_transform(blocks_buffer, st_crs(26910)),\n  named_numbered,\n  \"blocks_buffer\",\n  append = FALSE\n)\n\n\nDeleting layer `blocks_buffer' using driver `GPKG'\nWriting layer `blocks_buffer' to data source \n  `../data/gis/named_numbered.gpkg' using driver `GPKG'\nWriting 36 features with 6 fields and geometry type Polygon.\n\n\nCode\ndbDisconnect(con)"
  },
  {
    "objectID": "ground/visualize_3d.html",
    "href": "ground/visualize_3d.html",
    "title": "Import and visualize 3d",
    "section": "",
    "text": "Now that I have plot points and treatment boundaries all defined with consistent naming, I can visualize a 3d model of our topography and determine a strategy for extracting topograpical variables and simulating representative topogrphy for fire simulation.\n\n\nCode\nlibrary(rgl)\nlibrary(dplyr)\nlibrary(sf)\nlibrary(stars)\nlibrary(rayshader)\n\n# Allow printing to html document\nrgl::setupKnitr(autoprint = TRUE)\n\n# I want to overlay my plots on a 3d surface representing the terrain for each\n# site\nmy_import_rast &lt;- function(fold) {\n  folder &lt;- paste0(\"../data/gis/\", fold)\n  list.files(folder, full.names = TRUE, pattern = \".tif$\") |&gt;\n    st_mosaic() |&gt;\n    read_stars()\n}\naerial &lt;- my_import_rast(\"EE_naip_jdsf\")\ndem &lt;- my_import_rast(\"usgs_1m_dem\")\nvect_db &lt;- \"../data/gis/named_numbered.gpkg\"\nmy_read &lt;- function(lname) {\n  st_read(vect_db, lname, as_tibble = TRUE, quiet = TRUE)\n}\nblocks_buffer &lt;- my_read(\"blocks_buffer\")\nblocks &lt;- my_read(\"blocks\")\nplot_centers &lt;- my_read(\"plot_centers\") |&gt; filter(!is.na(plotid))\n\n# determine groupings of blocks for individual figures and alternatively, filter\n# out desired targets\nlist_figures &lt;- function(blocks, by = c(site, burn), my_filter = TRUE) {\n  st_drop_geometry(blocks) |&gt;\n    dplyr::filter({{ my_filter }}) |&gt;\n    distinct(pick({{ by }})) |&gt;\n    purrr::transpose()\n}\n\n# construct a filter get get data for one figure based on specified groups.\nmake_filter &lt;- function(fig) {\n  x &lt;- purrr::map2(unname(fig), names(fig), ~rlang::expr(!!sym(.y) == !!.x))\n  function(obj) {\n    filter(obj, !!!x)\n  }\n}\n\n# This function draws a 3d map of a portion of the study area.\naerial_photo_3d &lt;- function(fig) {\n\n  my_filter &lt;- make_filter(fig)\n  oneblock &lt;- my_filter(blocks)\n  onecenters &lt;- my_filter(plot_centers)\n  oneplots &lt;- st_buffer(onecenters, 11.28)\n  map_bb &lt;- st_bbox(oneblock)\n  onedem &lt;- dem[map_bb]\n  onephoto &lt;- aerial[map_bb]\n\n# get actual data for the dem\n  dem_matrix &lt;- st_as_stars(onedem)[[1]]\n\n# provide rgb array how rayshader likes it, also brighten image\n  aerial_array &lt;- st_as_stars(onephoto) |&gt;\n    slice(band, 1:3) |&gt;\n    pull() |&gt;\n    (`/`)(255) |&gt;\n    scales::rescale(to = c(0, 1)) |&gt;\n    aperm(c(2, 1, 3))\n\n# plot outlines with linestrings instead of polygons\n  plots_overlay &lt;- rayshader::generate_line_overlay(\n    st_cast(oneplots, \"MULTILINESTRING\"),\n    extent = st_bbox(onedem),\n    heightmap = dem_matrix,\n    color = \"red\"\n  )\n\n  block_overlay &lt;- rayshader::generate_polygon_overlay(\n    oneblock,\n    extent = st_bbox(onedem),\n    heightmap = dem_matrix,\n    linecolor = \"yellow\",\n    linewidth = 2,\n    palette = \"white\"\n  )\n  rw_texture &lt;- create_texture(\n    \"#bca5a1\", \"#bf754e\", \"#6a3b1e\", \"#bf754e\", \"#daaa75\"\n  )\n\n  aerial_array |&gt; \n    add_overlay(plots_overlay) |&gt;\n    add_overlay(block_overlay, alphacolor = \"white\") |&gt;\n    plot_3d(dem_matrix, \n      theta = 300, phi = 25, fov = 60, zoom = 0.8,\n      plot_new = FALSE, clear_previous = FALSE, close_previous = FALSE\n    )\n\n  for (i in seq_len(nrow(onecenters))) {\n    render_label(\n      dem_matrix,\n      text = as.character(onecenters[i, \"plotnum\", drop = TRUE]),\n      lat = st_coordinates(onecenters)[i, 2],\n      long = st_coordinates(onecenters)[i, 1],\n      altitude = 10,\n      extent = st_bbox(onedem),\n      linewidth = 1,\n      linecolor = \"grey30\",\n      textcolor = \"red\"\n    )\n  }\n  render_compass(position = \"S\", altitude = min(dem_matrix, na.rm = TRUE), compass_radius = 30)\n  source(\"./scripts/pan3d.r\")\n  pan3d(2)\n  title3d(paste(fig, collapse = \" \"))\n  print(paste(fig, collapse = \" \"))\n}\n\n# This will render all units at the burn/no-burn level\n# rgl::mfrow3d(4, 3)\n# for(fig in list_figures(blocks)) {\n#   rgl::next3d()\n#   aerial_photo_3d(fig)\n# }\n\n\naerial_photo_3d(list(site = \"fair\", burn = \"nb\"))\n\n\nCallbacks set on button 2 of RGL device 1 in subscene 7 \n[1] \"fair nb\"\n\n\nCode\n# dem_matrix |&gt;\n#   sphere_shade(texture = rw_texture) |&gt;\n#   add_overlay(plots_overlay) |&gt;\n#   plot_3d(dem_matrix)\n#\n# bb &lt;- st_bbox(oneraster)\n# deltay &lt;- bb[4] - bb[2]\n# y_offset &lt;- (1 - 200 / deltay) / 2 \n# dem_matrix |&gt;\n#   sphere_shade(texture = rw_texture) |&gt;\n#   add_shadow(texture_shade(dem_matrix)) |&gt;\n#   add_shadow(lamb_shade(dem_matrix), max_darken = 0.2) |&gt;\n#   add_overlay(plots_overlay) |&gt;\n#   plot_3d(dem_matrix, theta = 300, phi = 25, fov = 60, zoom = 0.8)\n# render_compass(position = \"S\", altitude = min(dem_matrix, na.rm = TRUE), compass_radius = 30)\n# render_scalebar(\n#   limits = c(0, 200),\n#   scale_length = c(y_offset, 1 - y_offset),\n#   y = min(dem_matrix, na.rm = TRUE),\n#   label_unit = \"m\"\n# )"
  }
]